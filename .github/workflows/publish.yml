on:
  workflow_dispatch:
  push:
    branches: main

name: Quarto Publish

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Quarto
        uses: quarto-dev/quarto-actions/setup@v2

      - name: Install R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: '4.2.0'

      - name: Cache renv Library
        uses: actions/cache@v4
        with:
          path: ~/.cache/renv
          key: ${{ runner.os }}-renv-${{ hashFiles('**/renv.lock') }}-v2
          restore-keys: |
            ${{ runner.os }}-renv-${{ hashFiles('**/renv.lock') }}-

      - name: Install R Dependencies
        uses: r-lib/actions/setup-renv@v2
        with:
          cache-version: 1

      - name: Clean up gh-pages branch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Configure git so that commits can be made by the Action
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"

          # Remove any existing local gh-pages directory to avoid conflicts
          rm -rf gh-pages

          # Check if the gh-pages branch exists on the remote
          if git ls-remote --exit-code origin gh-pages; then
            echo "gh-pages branch exists, cloning it."
            git clone --branch gh-pages --depth 1 https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY} gh-pages
          else
            echo "gh-pages branch does not exist. Creating it."
            mkdir gh-pages
            cd gh-pages
            git init
            git checkout -b gh-pages
            # Create an initial empty commit so that the branch exists remotely
            git commit --allow-empty -m "Initial commit on gh-pages branch"
            git push --set-upstream https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY} gh-pages
            cd ..
            # Remove the directory to ensure a clean clone
            rm -rf gh-pages
            git clone --branch gh-pages --depth 1 https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY} gh-pages
          fi

          # Remove all files from the branch
          cd gh-pages
          git rm -rf . || true
          rm -rf *
          
          # Commit and push the cleanup (if there was anything to commit)
          git commit -m "Clean up gh-pages branch" || echo "Nothing to commit"
          git push origin gh-pages

      - name: Render and Publish
        uses: quarto-dev/quarto-actions/publish@v2
        with:
          target: gh-pages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
